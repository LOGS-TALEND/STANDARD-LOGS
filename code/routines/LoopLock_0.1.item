package routines;

/*
 * Méthodes permettant de gérer des états et des sorties de boucle pour les traitements STKMVT
 */
public class LoopLock {
	
	// Variables stockant l'état des boucles pour SensMouvement
	private static boolean isLockedSens;
	private static int lastRangSens;
	private static boolean hasStartedSens;
	
	// Variables stockant l'état des boucles pour AffectationMarchandise
	private static boolean isLockedAffect;
	private static int lastRangAffect;
	private static boolean hasStartedAffect;
	
	// Initialise les variables pour une instance de SensMouvement
	public static boolean initLockSens() {
		isLockedSens = false;
		lastRangSens = 0;
		hasStartedSens = false;
		return true;
	}
	
	// Initialise les variables pour une instance d'AffectationMarchandise
	public static boolean initLockAffect() {
		isLockedAffect = false;
		lastRangAffect = 0;
		hasStartedAffect = false;
		return true;
	}
	
	// Vérifie si le traitement pour SensMouvement se trouve est en train de boucler sur les 
	// mouvements pouvant potentiellement être cumulés avec le mouvement courant. 
	// Une fois sorti de ces mouvements, la boucle est "lockée" pour le reste du mouvement 
	// courant (implémentation d'un continue).
	// M1 = mouvement courant
	// M2 = mouvement examiné par la boucle interne du traitement DM
	public static boolean checkLockSens(String sensMvt, String codeMvt, String rangM1, String rangM2, 
			String rangTotM1, String rangTotM2) {
		// On ne regarde que les mouvements de rang total supérieur au mouvement courant
		if(Integer.compare(Integer.parseInt(rangTotM1), Integer.parseInt(rangTotM2)) < 0) {	
			// On ne regarde que les mouvements de rang par article supérieur au mouvement courant
			if(Integer.compare(Integer.parseInt(rangM1), Integer.parseInt(rangM2)) < 0) {
				// Si M2 n'est pas un mouvement cumulable, alors on sort de la boucle
				if(!sensMvt.equals("+") || !codeMvt.equals("RA")) {
					isLockedSens = true;
				}
				// S'il y a eu une rupture dans les rangs (= un mouvement avec article différent)
				// alors on sort de la boucle
				if(lastRangSens != 0 && lastRangSens != Integer.parseInt(rangM2)-1) {
					isLockedSens = true;
				} else {
					lastRangSens = Integer.parseInt(rangM2);
				}
				// Même chose que précédemment dans le cas où il n'y a pas de M2 potentiel cumulable
				if(!hasStartedSens) {
					if(Integer.parseInt(rangTotM1) == Integer.parseInt(rangTotM2)-1) {
						hasStartedSens = true;
					} else {
						isLockedSens = true;
					}
				}
			}
		}
		return isLockedSens;
	}
	
	// Vérifie si le traitement pour AffectationMarchandise se trouve est en train de boucler sur les 
	// mouvements pouvant potentiellement être cumulés avec le mouvement courant. 
	// Une fois sorti de ces mouvements, la boucle est "lockée" pour le reste du mouvement 
	// courant (implémentation d'un continue).
	// M1 = mouvement courant
	// M2 = mouvement examiné par la boucle interne du traitement DM
	public static boolean checkLockAffect(String sensMvt, String codeMvt, String rangM1, String rangM2, 
			String rangTotM1, String rangTotM2) {
		// On ne regarde que les mouvements de rang total supérieur au mouvement courant
		if(Integer.compare(Integer.parseInt(rangTotM1), Integer.parseInt(rangTotM2)) < 0) {	
			if(Integer.compare(Integer.parseInt(rangM1), Integer.parseInt(rangM2)) < 0) {
				// Si M2 n'est pas un mouvement cumulable, alors on sort de la boucle
				if(!sensMvt.equals("+") || !codeMvt.equals("RA")) {
					isLockedAffect = true;
				}
				// S'il y a eu une rupture dans les rangs (= un mouvement avec article différent)
				// alors on sort de la boucle
				if(lastRangAffect != 0 && lastRangAffect != Integer.parseInt(rangM2)-1) {
					isLockedAffect = true;
				} else {
					lastRangAffect = Integer.parseInt(rangM2);
				}
				// Même chose que précédemment dans le cas où il n'y a pas de M2 potentiel cumulable
				if(!hasStartedAffect) {
					if(Integer.parseInt(rangTotM1) == Integer.parseInt(rangTotM2)-1) {
						hasStartedAffect = true;
					} else {
						isLockedAffect = true;
					}
				}
			}
		}
		return isLockedAffect;
	}
	
	// Renvoie la première valeur si elle est non-vide, sinon la 2e
	// De plus, parse la 1ere valeur pour récupérer le dernier champ après 
	// d'éventuels séparateurs '¤'
	public static String pickNotEmpty(String agConcat, String directMapping) {
		if(agConcat.isEmpty() || agConcat.equals("")) {
			return directMapping;
		}
		if(agConcat.contains("¤")) {
			return agConcat.substring(agConcat.lastIndexOf("¤")+1, agConcat.length());
		} else {
			return agConcat;
		}
	}
}
