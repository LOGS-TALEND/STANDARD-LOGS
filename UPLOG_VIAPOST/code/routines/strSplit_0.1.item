package routines;



/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class strSplit {

    /**
     * helloExample: not return value, only print "hello" + message.
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} string("world") input: The string need to be printed.
     * 
     * {example} helloExemple("world") # hello world !.
     */
    public static String strgSplit(String message) {
    	if (message == null || message.trim().isEmpty()) {
   		 return "";
    	} 
        StringBuilder myStr = new StringBuilder(); 
    	int starInd=0;
    	int endInd=starInd+70;
    	while(endInd < message.length())  {
    		String subStr =message.substring(starInd, endInd);
    		myStr.append(subStr+"\n\r");
    		starInd=endInd;
    		if(starInd+70 >= message.length()) {
    			subStr=message.substring(starInd, message.length()-1);
    			myStr.append(subStr+"\n\r");
    			return myStr.toString();
    		}
    		else {
    			endInd=starInd+70;
    		}
    	}
    	return myStr.toString();
    }
  
    public static int linesNo(String message) {
    	if (message == null || message.trim().isEmpty()) {
   		 return 0;
    	} 
    	int lineNo=(int) Math.ceil((message.length()/70.0));
       
    	return lineNo;
    }    
    
    public static String addLineNo(String message,String lineNo) {
    	if (message == null || message.trim().isEmpty()) {
   		 return "";
    	} 
    	StringBuilder strUpdated=new StringBuilder();
        String[] divStr=message.split("\\r?\\n");
        int Count=Integer.parseInt(lineNo);
        strUpdated.append(String.valueOf(Count)+divStr[0]+"\r\n");
        for(int i=1;i<divStr.length;i++)  {
        	Count++;
        	strUpdated.append(String.valueOf(Count)+divStr[i]+"\r\n");
        }
    	return strUpdated.toString();
    }    
}
